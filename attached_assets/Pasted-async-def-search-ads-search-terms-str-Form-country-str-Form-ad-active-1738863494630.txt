async def search_ads(
    search_terms: str = Form(...),
    country: str = Form(...),
    ad_active_status: str = Form("ALL"),
    ad_delivery_date_min: str = Form(None),
    ad_delivery_date_max: str = Form(None)
):
    # Force reload environment variables
    api_token = reload_env()
    if not api_token:
        raise HTTPException(status_code=400, detail="API token not configured")

    try:
        # Validate dates if provided
        if ad_delivery_date_min and ad_delivery_date_max:
            try:
                min_date = datetime.strptime(ad_delivery_date_min, "%Y-%m-%d")
                max_date = datetime.strptime(ad_delivery_date_max, "%Y-%m-%d")
                if min_date > max_date:
                    raise HTTPException(
                        status_code=400,
                        detail="Start date must be before end date"
                    )
            except ValueError as e:
                raise HTTPException(
                    status_code=400,
                    detail="Invalid date format. Use YYYY-MM-DD"
                )

        # Format parameters exactly as in the curl example
        params = {
            "search_terms": f"'{search_terms}'",  # Quoted as in the example
            "ad_type": "ALL",
            "ad_reached_countries": f"['{country}']",  # Array format as in the example
            "access_token": api_token,
            "fields": (
                "id,page_name,page_id,currency,impressions,spend,"
                "ad_creation_time,ad_delivery_start_time,ad_delivery_stop_time,ad_snapshot_url,"
                "ad_creative_bodies,ad_creative_link_captions,ad_creative_link_descriptions,ad_creative_link_titles,"
                "bylines,delivery_by_region,demographic_distribution,estimated_audience_size,"
                "languages,publisher_platforms,target_ages,target_gender,target_locations,"
                "age_country_gender_reach_breakdown,beneficiary_payers"
            ),
            "limit": 100
        }

        # Add optional parameters
        if ad_delivery_date_min:
            params["ad_delivery_date_min"] = ad_delivery_date_min
        if ad_delivery_date_max:
            params["ad_delivery_date_max"] = ad_delivery_date_max
        if ad_active_status != "ALL":
            params["ad_active_status"] = ad_active_status

        # Create URL with parameters manually to match curl format
        url = FB_ADS_LIBRARY_URL
        
        print("Making request with:")
        print(f"URL: {url}")
        print(f"Parameters: {params}")

        async with httpx.AsyncClient(timeout=30.0) as client:  # Increased timeout
            # Make request
            response = await client.get(url, params=params)
            
            print("\nFull API Request URL:")
            print("------------------------")
            print(response.url)
            print("------------------------\n")
            
            print(f"Response Status: {response.status_code}")
            print(f"Response Headers: {dict(response.headers)}")
            print(f"Response Content: {response.text[:1000]}")  # Show more content for debugging

            try:
                response_data = response.json()
            except Exception as e:
                print(f"Failed to parse JSON: {str(e)}")
                print(f"Raw response: {response.text}")
                raise HTTPException(
                    status_code=500,
                    detail="Failed to parse API response"
                )

            print(f"\nAPI Response Data Structure:")
            print("------------------------")
            if response.status_code == 200:
                if 'data' in response_data and len(response_data['data']) > 0:
                    print("Sample Ad Attributes:")
                    for key, value in response_data['data'][0].items():
                        print(f"{key}: {value}")
                else:
                    print("No ads found in response")
            print("------------------------\n")

            if response.status_code == 200:
                if "data" in response_data:
                    return response_data
                else:
                    print(f"No data in response: {response_data}")
                    raise HTTPException(
                        status_code=400,
                        detail="No data in API response"
                    )
            else:
                error = response_data.get('error', {})
                error_msg = error.get('message', 'Unknown error')
                error_code = error.get('code', 'Unknown code')
                error_subcode = error.get('error_subcode', '')
                error_type = error.get('type', '')
                
                print(f"API Error: {error}")
                raise HTTPException(
                    status_code=400,
                    detail=f"Facebook API error: {error_msg} (Code: {error_code}, Subcode: {error_subcode}, Type: {error_type})"
                )

    except httpx.HTTPError as e:
        print(f"HTTP Error: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error fetching ads: {str(e)}"
        )
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        print(f"Error type: {type(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Unexpected error: {str(e)}"
        )
